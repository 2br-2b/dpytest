
from typing import List, Union, Dict, Callable, Coroutine, Any, Optional, NoReturn, BinaryIO, Tuple, overload
import pathlib
import asyncio
import discord
import discord.state as state
import discord.http as dhttp

from .state import FakeState

JsonVals = Union[str, int, bool, Dict[str, 'JsonVals'], List['JsonVals']]
JsonDict = Dict[str, JsonVals]
AnyChannel = Union[discord.abc.GuildChannel, discord.abc.PrivateChannel]


class BackendConfig:
    messages: Dict[int, List[Dict[str, Any]]]
    state: FakeState

_cur_config: Optional[BackendConfig]

class FakeHttp(dhttp.HTTPClient):

    fileno: int = ...
    state: FakeState

    def __init__(self, loop: asyncio.AbstractEventLoop = ...) -> None: ...
    def _get_higher_locs(self, num: int) -> Dict[str, Any]: ...
    async def request(self, *args, **kwargs) -> NoReturn: ...
    async def send_files(self, channel_id: int, *, files: Tuple[discord.File], content: str = ..., tts: bool = ..., embed: JsonDict = ..., nonce: int = ...) -> JsonDict: ...
    async def send_message(self, channel_id: int, content: str, *, tts: bool = ..., embed: JsonDict = ..., nonce: int = ...) -> JsonDict: ...
    async def application_info(self) -> JsonDict: ...
    async def change_my_nickname(self, guild_id: int, nickname: str, *, reason: str = ...) -> JsonDict: ...
    async def edit_member(self, guild_id: int, user_id: int, *, reason: str = ..., **fields: Any) -> None: ...
    async def create_role(self, guild_id: int, *, reason: str = ..., **fields: Any) -> JsonDict: ...
    async def add_role(self, guild_id: int, user_id: int, role_id: int, *, reason: str = ...) -> None: ...

def get_state() -> FakeState: ...

def make_guild(name: str, members: List[discord.Member] = ..., channels: List[AnyChannel] = ..., roles: List[JsonDict] = ...,
               owner: bool = ..., id_num: int = ...) -> discord.Guild: ...

def update_guild(guild: discord.Guild, roles: List[discord.Role] = ...) -> discord.Guild: ...

def make_role(name: str, guild: discord.Guild, id_num: int = ..., colou: int = ..., permissions: int = ..., hoist: bool = ..., mentionable: bool = ...) -> discord.Role: ...

def update_role(role: discord.Role, colour: int = ..., color: int = ..., permissions: int = ..., hoist: bool = ..., mentionable: bool = ...) -> discord.Role: ...

def delete_role(role: discord.Role) -> None: ...

def make_text_channel(name: str, guild: discord.Guild, position: int = ..., id_num: int = ...) -> discord.TextChannel: ...

def update_text_channel(channel: discord.TextChannel, target: Union[discord.User, discord.Role], override: discord.PermissionOverwrite = ...) -> None: ...

def make_user(username: str, discrim: Union[str, int], avatar: str = ..., id_num: int = ...) -> discord.User: ...

def make_member(user: discord.User, guild: discord.Guild, nick: str = ..., roles: List[discord.Role] = ...) -> discord.Member: ...

def update_member(member: discord.Member, nick: str = ..., roles: List[discord.Role] = ...) -> discord.Member: ...

def delete_member(member: discord.Member) -> None: ...

def make_message(content: str, author: Union[discord.User, discord.Member], channel: AnyChannel, id_num: int = ...) -> discord.Message: ...

def delete_message(message: discord.Message) -> None: ...

def make_attachment(filename: pathlib.Path, name: str = ...) -> discord.Attachment: ...

@overload
def configure(client: discord.Client) -> None: ...
@overload
def configure(client: Optional[discord.Client], *, use_dummy: bool = ...) -> None: ...

def main() -> None: ...